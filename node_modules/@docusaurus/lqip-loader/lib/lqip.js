"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.palette = exports.base64 = void 0;
const tslib_1 = require("tslib");
const node_vibrant_1 = (0, tslib_1.__importDefault)(require("node-vibrant"));
const path_1 = (0, tslib_1.__importDefault)(require("path"));
const sharp_1 = (0, tslib_1.__importDefault)(require("sharp"));
const utils_1 = require("./utils");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const { version } = require('../package.json');
const ERROR_EXT = `Error: Input file is missing or uses unsupported image format, lqip v${version}`;
const SUPPORTED_MIMES = {
    jpeg: 'image/jpeg',
    jpg: 'image/jpeg',
    png: 'image/png',
};
async function base64(file) {
    let extension = path_1.default.extname(file) || '';
    extension = extension.split('.').pop();
    if (!SUPPORTED_MIMES[extension]) {
        throw new Error(ERROR_EXT);
    }
    const data = await (0, sharp_1.default)(file).resize(10).toBuffer();
    if (data) {
        return (0, utils_1.toBase64)(SUPPORTED_MIMES[extension], data);
    }
    throw new Error('Unhandled promise rejection in base64 promise');
}
exports.base64 = base64;
async function palette(file) {
    const vibrant = new node_vibrant_1.default(file, {});
    const pal = await vibrant.getPalette();
    if (pal) {
        return (0, utils_1.toPalette)(pal);
    }
    throw new Error(`Unhandled promise rejection in colorPalette ${pal}`);
}
exports.palette = palette;
process.on('unhandledRejection', (up) => {
    throw up;
});
